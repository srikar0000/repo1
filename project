Project Objective:

The goal is to create a Docker Compose setup that integrates a Flask application (backend) with a Redis service (data store) to track and display user visits.

Here's a step-by-step guide:

Step 1: Create Project Directory

Create a directory for your project:

mkdir composetest
cd composetest

Step 2: Create Flask Application (app.py)

Create a file named app.py with the following Python code:

import time
import redis
from flask import Flask

app = Flask(__name__)
cache = redis.Redis(host='redis', port=6379)

def get_hit_count():
    retries = 5
    while True:
        try:
            return cache.incr('hits')
        except redis.exceptions.ConnectionError as exc:
            if retries == 0:
                raise exc
            retries -= 1
            time.sleep(0.5)

@app.route('/')
def hello():
    count = get_hit_count()
    return 'Hello World! I have been seen {} times.\n'.format(count)

This code does the following:

Imports necessary libraries.

Creates a Flask application.

Connects to a Redis server (named redis in the Docker Compose setup).

get_hit_count() function:

Tries to increment the 'hits' counter in Redis.

Handles potential connection errors with retries.

hello() route:

Calls get_hit_count() to get the current hit count.

Returns a greeting with the hit count.

Step 3: Create requirements.txt

Create a file named requirements.txt with the following content:

flask
redis

This file lists the Python packages that need to be installed.

Step 4: Create Dockerfile for Flask App

Create a file named Dockerfile with the following content:

FROM python:3.7-alpine
WORKDIR /code
ENV FLASK_APP=app.py
ENV FLASK_RUN_HOST=0.0.0.0
RUN apk add --no-cache gcc musl-dev linux-headers
RUN python -m venv /venv
ENV PATH="/venv/bin:$PATH"
COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt
EXPOSE 5000
COPY . .
CMD ["flask", "run"]

This Dockerfile does the following:

Uses a Python 3.7 Alpine Linux image.

Sets the working directory to /code.

Sets environment variables for Flask.

Installs build dependencies.

Creates a virtual environment.

Sets the PATH to use the virtual environment.

Copies requirements.txt and installs the dependencies.

Exposes port 5000 (the default Flask port).

Copies the application code.

Sets the command to run the Flask application.

Step 5: Create docker-compose.yml

Create a file named docker-compose.yml with the following content:

version: "3.9"
services:
    web:
        build: .
        ports:
            - "8000:5000"
        depends_on:
            - redis
    redis:
        image: "redis:alpine"

This docker-compose.yml file defines two services:

web:

Builds the Flask application from the current directory (.).

Maps port 8000 on the host to port 5000 in the container.

Specifies that the web service depends on the redis service.

redis:

Uses the redis:alpine image from Docker Hub.

Step 6: Run the Application

Run the following command in the composetest directory:

docker compose up -d

This command will:

Build the Docker image for the Flask application.

Start the web and redis containers.

Run the containers in the background.

Step 7: Access the Application

Open your web browser and go to http://<your_docker_host_ip>:8000. You should see the "Hello World!" message with the visit counter.
